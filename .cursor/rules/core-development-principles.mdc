---
description: Core development principles, commands, workflow, and best practices for projects using Krafters UI component library
globs:
  - "**/*"
alwaysApply: true
---
# Core Development Principles, Workflow & Tech Stack

## Architecture & Technology Stack

- **Framework**: Nuxt.js 4 with Vue 3 Composition API
- **Build Tool**: Vite
- **Testing**: Vitest with ESLint and TypeScript strict mode
- **Package Manager**: pnpm (preferred over npm/yarn)
- **Language**: TypeScript with strict configuration
- **Styling**: CSS with custom design system
- **Features**: i18n (EN/NL), dark mode, responsive design, MCP server
- **MCP Endpoint**: `http://localhost:3003/__mcp/sse` (development)
- **Repository**: [GitHub](https://github.com/kraftersnl/krafters-ui) | [NPM](https://www.npmjs.com/package/@krafters/ui)
- **Focus**: Accessibility-first components with WCAG compliance built-in

## Development Commands

```bash
pnpm dev          # Start development server
pnpm run lint     # Run ESLint
pnpm run test     # Run tests with Vitest
```

## Core Development Principles

### Accessibility First
- **WCAG 2.2 AA compliance** is mandatory for all components
- Screen reader support must be implemented
- Keyboard navigation is required for all interactive elements
- Focus management must be properly handled
- ARIA attributes should be used appropriately
- Sufficient color contrast ratios must be maintained
- Every change must produce accessible outputs that comply with all 55 WCAG 2.2 A and AA success criteria

### Code Quality Standards
- Use TypeScript with strict mode enabled
- Follow Vue 3 Composition API patterns
- Implement comprehensive TypeScript types
- Write intuitive component APIs
- Implement proper error handling
- Use semantic naming conventions
- Organize code in logical file structures
- Prefer composition over inheritance

### Testing & Quality
- Use ESLint for code quality
- Write comprehensive tests with Vitest
- Implement accessibility testing
- Test keyboard navigation
- Verify screen reader compatibility

### Performance
- Implement tree-shaking for components
- Use lazy loading where appropriate
- Optimize bundle size
- Monitor performance metrics

### Dependencies
- **Preference**: Avoid adding new external dependencies unless absolutely necessary
- **Package Manager**: Use pnpm for all package management
- **Version Control**: Keep dependencies up to date and secure

## Project Planning

When working on new features or components:
1. **Outline a plan** before making code changes
2. Consider accessibility requirements from the start
3. Follow established patterns and conventions
4. Test thoroughly before implementation
5. Document any new patterns or utilities

---

_Use these principles as a baseline for all coding projects._