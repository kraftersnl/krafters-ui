---
description: Krafters UI Component Library - Available components and usage patterns
globs:
  - "**/*.vue"
  - "**/*.ts"
alwaysApply: true
---

# Krafters UI Component Library

## Component Categories

### Form Components
- **Input**: Text input with accessibility features
- **Textarea**: Multi-line text input
- **Select**: Dropdown selection component
- **MultiSelect**: Multi-option selection
- **Checkbox**: Single checkbox with group support
- **CheckboxGroup**: Multiple checkbox management
- **Radio**: Radio button with group support
- **RadioGroup**: Radio button group management
- **Switch**: Toggle switch component
- **DatePicker**: Date selection component
- **FileInput**: File upload component
- **RangeInput**: Slider/range input component
- **Search**: Search input with suggestions
- **Form**: Form wrapper with validation support

### Layout & Navigation
- **Card**: Content container component
- **Accordion**: Collapsible content sections
- **AccordionDetails**: Accordion content wrapper
- **Tabs**: Tabbed interface component
- **MenuList**: Navigation menu component
- **MenuListTooltip**: Menu with tooltip support
- **MobileMenu**: Mobile-optimized navigation
- **Pagination**: Page navigation component
- **Spacer**: Layout spacing utility
- **SkipLink**: Accessibility skip navigation

### Interactive Elements
- **Button**: Primary button component
- **CopyButton**: Copy-to-clipboard functionality
- **Dialog**: Modal dialog component
- **Popover**: Floating content overlay
- **Tooltip**: Contextual help text
- **ProgressCircle**: Circular progress indicator
- **ProgressMeter**: Linear progress bar
- **Skeleton**: Loading state placeholder

### Data Display
- **Table**: Data table component
- **Chip**: Tag/label component
- **Ellipsis**: Text truncation with expand
- **Callout**: Highlighted information box
- **Markdown**: Markdown rendering and editing
  - MarkdownEditor: Rich text editor
  - MarkdownPreview: Markdown display

### Utility Components
- **FocusLoop**: Keyboard navigation management to trap focus inside a container
- **LanguageSelect**: Language switcher to switch between English and Dutch
- **ThemeSelect**: Theme selection
- **ThemeToggle**: Theme toggle switch to toggle between light and dark mode
- **UserMenu**: User account menu
- **VideoPlayer**: Video playback component to play videos from YouTube or Vimeo
- **AxePopup**: Accessibility testing integration

## Usage Patterns

### Basic Component Usage
```vue
<script setup>
import { Button } from '@krafters/ui';

function handleClick() {
  console.log('Button clicked');
}
</script>

<template>
  <Button label="Click me" variant="primary" @click="handleClick" />
</template>
```

### Nuxt Layer Integration
Krafters UI can be used in three different ways:

#### 1. Local Development
```ts
defineNuxtConfig({
  extends: ['../krafters-ui'],
});
```

#### 2. Extend from GitHub Repository (Development)
```ts
defineNuxtConfig({
  extends: ['github:kraftersnl/krafters-ui'],
});
```

#### 3. Extend from NPM Package (Production)
```bash
pnpm i @krafters/ui
```
```ts
defineNuxtConfig({
  extends: ['@krafters/ui'],
});
```

## Utilities Available

- **datetime**: Date and time formatting
- **file**: File handling utilities
- **markdown**: Markdown processing
- **sort**: Sorting algorithms
- **index**: General utility functions

## ðŸ’¡ MCP Integration

For real-time, detailed project structure information, connect to the Nuxt MCP endpoint at `http://localhost:3003/__mcp/sse` during development.

## Documentation

The playground is available at `http://localhost:3003` and serves as interactive documentation with live examples of all components, their props, and external dependencies.

---

_This component library is designed to provide accessible, reusable UI components for modern Vue.js applications with a focus on user experience and developer productivity. Use this component library for all coding projects._